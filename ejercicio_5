{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ejercicio 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La cervecería más importante del mundo (Guiness) ha contratado a un analista de investigación de operaciones para analizar su posición en el mercado. Están preocupados en especial por su mayor competidor (Heineken). El analista piensa que el cambio de marca se puede modelar como una cadena de Markov incluyendo tres estados, los estados G y H representan a los clientes que beben cerveza producida por las mencionadas cervecerías y el estado I representa todas las demás marcas. Los datos se toman cada mes y el analista ha construido la siguiente matriz de transición de los datos históricos.\n",
    "\n",
    "| /| G | H  | I  |\n",
    "|--:|--:|---:|---:|\n",
    "| G |0.7|0.2 |0.1 |\n",
    "| H |0.2|0.75|0.05|\n",
    "| I |0.1|0.1 |0.8 |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matriz de transición: \n",
      " [[0.7  0.2  0.1 ]\n",
      " [0.2  0.75 0.05]\n",
      " [0.1  0.1  0.8 ]] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Ingresamos la matriz de transición:\n",
    "T5 = np.array([[0.7, 0.2, 0.1], [0.2, 0.75, 0.05], [0.1, 0.1, 0.8]])\n",
    "print('Matriz de transición: \\n %s \\n' %T5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matriz A relacionada al sistema lineal de ecauciones: \n",
      " [[-0.3   0.2   0.1 ]\n",
      " [ 0.2  -0.25  0.1 ]\n",
      " [ 0.1   0.05 -0.2 ]] \n",
      "\n",
      "Vector B relacionado al sistema lineal de ecuaciones: \n",
      " [0. 0. 0.] \n",
      "\n",
      "Matriz A: \n",
      " [[-0.3   0.2   0.1 ]\n",
      " [ 0.2  -0.25  0.1 ]\n",
      " [ 0.1   0.05 -0.2 ]\n",
      " [ 1.    1.    1.  ]] \n",
      "\n",
      "Vector B: \n",
      " [0. 0. 0. 1.] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Construir matriz A y vector B:\n",
    "A5 = (np.transpose(T5) - np.identity(3))\n",
    "print('Matriz A relacionada al sistema lineal de ecauciones: \\n %s \\n' %A5)\n",
    "B5 = np.zeros(3)\n",
    "print('Vector B relacionado al sistema lineal de ecuaciones: \\n %s \\n' %B5)\n",
    "\n",
    "# Agregar sumatoria de probabilidades:\n",
    "adicional = np.array([[1, 1, 1]])\n",
    "A5 = np.concatenate((A5, adicional), axis=0)\n",
    "print('Matriz A: \\n %s \\n' %A5)\n",
    "B5 = np.append(B5, 1)\n",
    "print('Vector B: \\n %s \\n' %B5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solución del sistema lineal de ecuaciones: \n",
      " [0.34615385 0.38461538 0.26923077] \n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\m_a_r\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\ipykernel_launcher.py:2: FutureWarning: `rcond` parameter will change to the default of machine precision times ``max(M, N)`` where M and N are the input matrix dimensions.\n",
      "To use the future default and silence this warning we advise to pass `rcond=None`, to keep using the old, explicitly pass `rcond=-1`.\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# Resolvemos por mínimos cuadrados:\n",
    "X5, _, _, _ = np.linalg.lstsq(A5, B5)\n",
    "print(f'Solución del sistema lineal de ecuaciones: \\n {X5} \\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
